# Even Fibonacci numbers
# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

# FUNCTIONS

# a faster implementation of fibonacci as it should fit our needs when we sum big numbers
def fibonacci(n) :
    if n <= 2 :
        return 1

    else :
        olderValue = 1
        oldValue = 1
        newValue = 1

        for i in range(3, n + 1) :
            newValue = oldValue + olderValue
            olderValue = oldValue
            oldValue = newValue

        return newValue

def sumEvenFibonacciNumbers():
    outputSum = 0

    number = 1
    fibonacciN = fibonacci(number)

    while fibonacciN < 4000000:
        number += 1
        fibonacciN = fibonacci(number)
        if fibonacciN % 2 == 0:
            outputSum += fibonacciN

    return outputSum

# main
def main():
    print(sumEvenFibonacciNumbers())

# PROGRAM RUN
main()